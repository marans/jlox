!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AND	TokenType.java	/^  AND, CLASS, ELSE, FALSE, FUN, FOR, IF, NIL, OR,$/;"	e	enum:TokenType	file:
BANG	TokenType.java	/^  BANG, BANG_EQUAL,$/;"	e	enum:TokenType	file:
BANG_EQUAL	TokenType.java	/^  BANG, BANG_EQUAL,$/;"	e	enum:TokenType	file:
CLASS	TokenType.java	/^  AND, CLASS, ELSE, FALSE, FUN, FOR, IF, NIL, OR,$/;"	e	enum:TokenType	file:
COMMA	TokenType.java	/^  COMMA, DOT, MINUS, PLUS, SEMICOLON, SLASH, STAR,$/;"	e	enum:TokenType	file:
DOT	TokenType.java	/^  COMMA, DOT, MINUS, PLUS, SEMICOLON, SLASH, STAR,$/;"	e	enum:TokenType	file:
ELSE	TokenType.java	/^  AND, CLASS, ELSE, FALSE, FUN, FOR, IF, NIL, OR,$/;"	e	enum:TokenType	file:
EOF	TokenType.java	/^  EOF$/;"	e	enum:TokenType	file:
EQUAL	TokenType.java	/^  EQUAL, EQUAL_EQUAL,$/;"	e	enum:TokenType	file:
EQUAL_EQUAL	TokenType.java	/^  EQUAL, EQUAL_EQUAL,$/;"	e	enum:TokenType	file:
FALSE	TokenType.java	/^  AND, CLASS, ELSE, FALSE, FUN, FOR, IF, NIL, OR,$/;"	e	enum:TokenType	file:
FOR	TokenType.java	/^  AND, CLASS, ELSE, FALSE, FUN, FOR, IF, NIL, OR,$/;"	e	enum:TokenType	file:
FUN	TokenType.java	/^  AND, CLASS, ELSE, FALSE, FUN, FOR, IF, NIL, OR,$/;"	e	enum:TokenType	file:
GREATER	TokenType.java	/^  GREATER, GREATER_EQUAL,$/;"	e	enum:TokenType	file:
GREATER_EQUAL	TokenType.java	/^  GREATER, GREATER_EQUAL,$/;"	e	enum:TokenType	file:
IDENTIFIER	TokenType.java	/^  IDENTIFIER, STRING, NUMBER,$/;"	e	enum:TokenType	file:
IF	TokenType.java	/^  AND, CLASS, ELSE, FALSE, FUN, FOR, IF, NIL, OR,$/;"	e	enum:TokenType	file:
LEFT_BRACE	TokenType.java	/^  LEFT_PAREN, RIGHT_PAREN, LEFT_BRACE, RIGHT_BRACE,$/;"	e	enum:TokenType	file:
LEFT_PAREN	TokenType.java	/^  LEFT_PAREN, RIGHT_PAREN, LEFT_BRACE, RIGHT_BRACE,$/;"	e	enum:TokenType	file:
LESS	TokenType.java	/^  LESS, LESS_EQUAL,$/;"	e	enum:TokenType	file:
LESS_EQUAL	TokenType.java	/^  LESS, LESS_EQUAL,$/;"	e	enum:TokenType	file:
Lox	Lox.java	/^public class Lox {$/;"	c
MINUS	TokenType.java	/^  COMMA, DOT, MINUS, PLUS, SEMICOLON, SLASH, STAR,$/;"	e	enum:TokenType	file:
NIL	TokenType.java	/^  AND, CLASS, ELSE, FALSE, FUN, FOR, IF, NIL, OR,$/;"	e	enum:TokenType	file:
NUMBER	TokenType.java	/^  IDENTIFIER, STRING, NUMBER,$/;"	e	enum:TokenType	file:
OR	TokenType.java	/^  AND, CLASS, ELSE, FALSE, FUN, FOR, IF, NIL, OR,$/;"	e	enum:TokenType	file:
PLUS	TokenType.java	/^  COMMA, DOT, MINUS, PLUS, SEMICOLON, SLASH, STAR,$/;"	e	enum:TokenType	file:
PRINT	TokenType.java	/^  PRINT, RETURN, SUPER, THIS, TRUE, VAR, WHILE,$/;"	e	enum:TokenType	file:
RETURN	TokenType.java	/^  PRINT, RETURN, SUPER, THIS, TRUE, VAR, WHILE,$/;"	e	enum:TokenType	file:
RIGHT_BRACE	TokenType.java	/^  LEFT_PAREN, RIGHT_PAREN, LEFT_BRACE, RIGHT_BRACE,$/;"	e	enum:TokenType	file:
RIGHT_PAREN	TokenType.java	/^  LEFT_PAREN, RIGHT_PAREN, LEFT_BRACE, RIGHT_BRACE,$/;"	e	enum:TokenType	file:
SEMICOLON	TokenType.java	/^  COMMA, DOT, MINUS, PLUS, SEMICOLON, SLASH, STAR,$/;"	e	enum:TokenType	file:
SLASH	TokenType.java	/^  COMMA, DOT, MINUS, PLUS, SEMICOLON, SLASH, STAR,$/;"	e	enum:TokenType	file:
STAR	TokenType.java	/^  COMMA, DOT, MINUS, PLUS, SEMICOLON, SLASH, STAR,$/;"	e	enum:TokenType	file:
STRING	TokenType.java	/^  IDENTIFIER, STRING, NUMBER,$/;"	e	enum:TokenType	file:
SUPER	TokenType.java	/^  PRINT, RETURN, SUPER, THIS, TRUE, VAR, WHILE,$/;"	e	enum:TokenType	file:
Scanner	Scanner.java	/^  Scanner(String source) {$/;"	m	class:Scanner
Scanner	Scanner.java	/^class Scanner {$/;"	c
THIS	TokenType.java	/^  PRINT, RETURN, SUPER, THIS, TRUE, VAR, WHILE,$/;"	e	enum:TokenType	file:
TRUE	TokenType.java	/^  PRINT, RETURN, SUPER, THIS, TRUE, VAR, WHILE,$/;"	e	enum:TokenType	file:
Token	Token.java	/^  Token(TokenType type, String lexeme, Object literal, int line) {$/;"	m	class:Token
Token	Token.java	/^class Token {$/;"	c
TokenType	TokenType.java	/^enum TokenType {$/;"	g
VAR	TokenType.java	/^  PRINT, RETURN, SUPER, THIS, TRUE, VAR, WHILE,$/;"	e	enum:TokenType	file:
WHILE	TokenType.java	/^  PRINT, RETURN, SUPER, THIS, TRUE, VAR, WHILE,$/;"	e	enum:TokenType	file:
addToken	Scanner.java	/^  private void addToken(TokenType type) {$/;"	m	class:Scanner	file:
addToken	Scanner.java	/^  private void addToken(TokenType type, Object literal) {$/;"	m	class:Scanner	file:
advance	Scanner.java	/^  private char advance() {$/;"	m	class:Scanner	file:
com.craftinginterpreters.lox	Lox.java	/^package com.craftinginterpreters.lox;$/;"	p
com.craftinginterpreters.lox	Scanner.java	/^package com.craftinginterpreters.lox;$/;"	p
com.craftinginterpreters.lox	Token.java	/^package com.craftinginterpreters.lox;$/;"	p
com.craftinginterpreters.lox	TokenType.java	/^package com.craftinginterpreters.lox;$/;"	p
current	Scanner.java	/^  private int current = 0;$/;"	f	class:Scanner	file:
error	Lox.java	/^  static void error(int line, String message) {$/;"	m	class:Lox
hadError	Lox.java	/^  static boolean hadError = false;$/;"	f	class:Lox
isAtEnd	Scanner.java	/^  private boolean isAtEnd() {$/;"	m	class:Scanner	file:
lexeme	Token.java	/^  final String lexeme;$/;"	f	class:Token
line	Scanner.java	/^  private int line = 1;$/;"	f	class:Scanner	file:
line	Token.java	/^  final int line; $/;"	f	class:Token
literal	Token.java	/^  final Object literal;$/;"	f	class:Token
main	Lox.java	/^  public static void main(String[] args) throws IOException {$/;"	m	class:Lox
match	Scanner.java	/^  private boolean match(char expected) {$/;"	m	class:Scanner	file:
peek	Scanner.java	/^  private char peek() {$/;"	m	class:Scanner	file:
report	Lox.java	/^  private static void report(int line, String where, String message) {$/;"	m	class:Lox	file:
run	Lox.java	/^  private static void run(String source) {$/;"	m	class:Lox	file:
runFile	Lox.java	/^  private static void runFile(String path) throws IOException {$/;"	m	class:Lox	file:
runPrompt	Lox.java	/^  private static void runPrompt() throws IOException {$/;"	m	class:Lox	file:
scanToken	Scanner.java	/^  private void scanToken() {$/;"	m	class:Scanner	file:
scanTokens	Scanner.java	/^  List<Token> scanTokens() {$/;"	m	class:Scanner
source	Scanner.java	/^  private final String source;$/;"	f	class:Scanner	file:
start	Scanner.java	/^  private int start = 0;$/;"	f	class:Scanner	file:
toString	Token.java	/^  public String toString() {$/;"	m	class:Token
tokens	Scanner.java	/^  private final List<Token> tokens = new ArrayList<>();$/;"	f	class:Scanner	file:
type	Token.java	/^  final TokenType type;$/;"	f	class:Token
